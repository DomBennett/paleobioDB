by=(max(richness [,2])/10)), col="grey", lwd=1)
abline(h=seq(0, ymx,
by=(ymx/10)), col="grey", lwd=1)
plot.new()
par (font.lab=1, col.lab="grey20", col.axis="grey50", cex.axis=0.8)
plot.window(xlim=c(xmn, xmx), xaxs="i",
ylim=c(ymn,ymx), yaxs="i")
abline(v=seq(xmn, xmx, by=1), col="grey", lwd=1)
abline(h=seq(0, ymx,
by=(ymx/10)), col="grey", lwd=1)
temporal_range
evo
time<- unique (c(evo$Var1, ext$Var1))
time
order ( unique (c(evo$Var1, ext$Var1)))
time<- rank(unique (c(evo$Var1, ext$Var1)))
rank(unique (c(evo$Var1, ext$Var1)))
time<- sort(unique (c(evo$Var1, ext$Var1)))
sort(unique (c(evo$Var1, ext$Var1)))
time1<- sort(evo$Var1)
time1
evo
xx = c(xmn, evo$Var1, xmx)
yy = c(0, evo$Freq, 0)
polygon(xx, yy, col="#0000FF30", border="#0000FF90")
axis(1)
axis(2, las=1)
xx = c(xmn, ext$Var1, xmx)
yy = c(0, ext$Freq, 0)
polygon(xx, yy, col="#FF000030", border="#0000FF90")
mtext("Million years before present", line=3, adj=1, side=1)
mtext(paste ("Number of new", rank), line= 3 , adj=0, side=2)
colour="#0000FF30"
bord="#0000FF"
par (font.lab=1, col.lab="grey20", col.axis="grey50", cex.axis=0.8)
plot.window(xlim=c(xmn, xmx), xaxs="i",
ylim=c(ymn,ymx), yaxs="i")
abline(h=seq(0, ymx,
abline(v=seq(xmn, xmx, by=1), col="grey", lwd=1)
by=(ymx/10)), col="grey", lwd=1)
xx = c(xmn, evo$Var1, xmx)
yy = c(0, evo$Freq, 0)
polygon(xx, yy, col=colour, border=bord)
axis(1)
axis(2, las=1)
plot.new()
par (font.lab=1, col.lab="grey20", col.axis="grey50", cex.axis=0.8)
plot.window(xlim=c(xmn, xmx), xaxs="i",
ylim=c(ymn,ymx), yaxs="i")
abline(v=seq(xmn, xmx, by=1), col="grey", lwd=1)
abline(h=seq(0, ymx,
by=(ymx/10)), col="grey", lwd=1)
xx = c(xmn, evo$Var1, xmx)
yy = c(0, evo$Freq, 0)
polygon(xx, yy, col=colour, border=bord)
axis(1)
axis(2, las=1)
mtext("Million years before present", line=3, adj=1, side=1)
mtext(paste ("Number of new", rank), line= 3 , adj=0, side=2)
abline(v=seq(xmn, xmx, by=1), col="grey90", lwd=1)
abline(h=seq(0, ymx,
by=(ymx/10)), col="grey90", lwd=1)
xx = c(xmn, evo$Var1, xmx)
yy = c(0, evo$Freq, 0)
polygon(xx, yy, col=colour, border=bord)
axis(1)
axis(2, las=1)
plot.new()
par (font.lab=1, col.lab="grey20", col.axis="grey50", cex.axis=0.8)
ylim=c(0,(max(richness [,2]))+(max(richness [,2])/10)), yaxs="i")
plot.window(xlim=c(max (te),min(te)), xaxs="i",
abline(v=seq(min(te), max(te), by=1), col="grey90", lwd=1)
abline(h=seq(0, max(richness [,2])+(max(richness [,2])/10),
plot.new()
par (font.lab=1, col.lab="grey20", col.axis="grey50", cex.axis=0.8)
plot.window(xlim=c(max (te),min(te)), xaxs="i",
ylim=c(0,(max(richness [,2]))+(max(richness [,2])/10)), yaxs="i")
abline(v=seq(min(te), max(te), by=1), col="grey90", lwd=1)
abline(h=seq(0, max(richness [,2])+(max(richness [,2])/10),
by=(max(richness [,2])/10)), col="grey90", lwd=1)
xx = c(min(te), sequence, max(te))
yy = c(0, richness[,2], 0)
polygon(xx, yy, col=colour, border=bor)
axis(1)
polygon(xx, yy, col=colour, border=bord)
axis(1)
axis(2, las=1)
mtext("Million years before present", line=3, adj=1, side=1)
mtext(paste ("Number of", rank), line= 3 , adj=0, side=2)
richness
xmx
xx
xx = c(xmn, evo$Var1, xmx)
xx
yy
yy = c(0, evo$Freq, 0)
yy
plot.new()
par (font.lab=1, col.lab="grey20", col.axis="grey50", cex.axis=0.8)
plot.window(xlim=c(xmn, xmx), xaxs="i",
ylim=c(ymn,ymx), yaxs="i")
abline(v=seq(xmn, xmx, by=1), col="grey90", lwd=1)
abline(h=seq(0, ymx,
by=(ymx/10)), col="grey90", lwd=1)
xx = c(xmn, evo$Var1, xmx)
yy = c(0, evo$Freq, 0)
polygon(xx, yy, col=colour, border=bord)
axis(1)
axis(1, labels=x)
axis(1, labels=xx)
ymx
pbdb_ext<- function (data, rank="species", colour="#0000FF30", bord="#0000FF") {
if (length (data$taxon_rank)!=0){
species<- data [data$taxon_rank==rank, ]
max_sp<- aggregate(species$early_age, list(species$taxon_name), max)
min_sp<- aggregate(species$late_age, list(species$taxon_name), min)
}
if (length (data$rnk)!=0){
rnnk<- data.frame (c("species", "genera", "families", "orders", "classes"),
c(3,5,9,13,15))
rnkk<- rnnk [match (rank, rnnk[,1]), 2]
species<- data [data$rnk==rnkk, ]
max_sp<- aggregate(species$eag, list(species$tna), max)
min_sp<- aggregate(species$lag, list(species$tna), min)
}
temporal_range<- data.frame (max_sp [,2], min_sp[,2])
row.names (temporal_range)<- max_sp[,1]
colnames (temporal_range)<- c("max", "min")
temporal_range<- temporal_range[with(temporal_range, order(-max, min)), ]
ext<- as.data.frame (table (temporal_range[,2]), stringsAsFactors=F)
ext<- ext [ext$Var1!=0,]
ext$Var1<- as.numeric (ext$Var1)
ymx<- max (ext[,2])
ymn<- min (ext[,2])
xmx<- max (ext[,1])
xmn<- min (ext[,1])
plot.new()
par (font.lab=1, col.lab="grey20", col.axis="grey50", cex.axis=0.8)
plot.window(xlim=c(xmn, xmx), xaxs="i",
ylim=c(ymn,ymx), yaxs="i")
abline(v=seq(xmn, xmx, by=1), col="grey90", lwd=1)
abline(h=seq(0, ymx,
by=(ymx/10)), col="grey90", lwd=1)
xx = c(xmn, evo$Var1, xmx)
yy = c(0, evo$Freq, 0)
polygon(xx, yy, col=colour, border=bord)
axis(1)
axis(2, las=1)
mtext("Million years before present", line=3, adj=1, side=1)
mtext(paste ("Number of extinct", rank), line= 3 , adj=0, side=2)
}
evo$Var1
evo
temporal_range
evo
temporal_range
evo<- as.data.frame (table (temporal_range[,1]), stringsAsFactors=F)
evo
evo$Freq
evo$Freq[1:12]/evo$Freq[2:13]
evo$Freq[1:length (evo$Freq)-1]/evo$Freq[2:length (evo$Freq)]
perc<- evo$Freq[1:length (evo$Freq)-1]/evo$Freq[2:length (evo$Freq)]
ymx<- max (evo[,2])
ymn<- min (evo[,2])
xmx<- max (evo[,1])
xmn<- min (evo[,1])
par (font.lab=1, col.lab="grey20", col.axis="grey50", cex.axis=0.8)
plot.window(xlim=c(xmn, xmx), xaxs="i",
ylim=c(ymn,ymx), yaxs="i")
ymx<- max (evo[,2])
ymn<- min (evo[,2])
xmx<- max (evo[,1])
xmn<- min (evo[,1])
plot.new()
par (font.lab=1, col.lab="grey20", col.axis="grey50", cex.axis=0.8)
plot.window(xlim=c(xmn, xmx), xaxs="i",
ylim=c(ymn,ymx), yaxs="i")
xmn<- min (evo[,1])
xmn
evo$Var1<- as.numeric (evo$Var1)
ymx<- max (evo[,2])
ymn<- min (evo[,2])
xmx<- max (evo[,1])
xmn<- min (evo[,1])
plot.new()
par (font.lab=1, col.lab="grey20", col.axis="grey50", cex.axis=0.8)
plot.window(xlim=c(xmn, xmx), xaxs="i",
ylim=c(ymn,ymx), yaxs="i")
abline(v=seq(xmn, xmx, by=1), col="grey90", lwd=1)
abline(h=seq(0, ymx,
by=(ymx/10)), col="grey90", lwd=1)
xx = c(xmn, evo$Var1, xmx)
yy = c(0, perc, 0)
polygon(xx, yy, col=colour, border=bord)
perc
xx = c(xmn, evo$Var1, xmx)
yy = c(0, c(0,perc), 0)
polygon(xx, yy, col=colour, border=bord)
axis(1)
axis(2, las=1)
perc
perc<- (evo$Freq[1:length (evo$Freq)-1]/evo$Freq[2:length (evo$Freq)])*100
ymx<- max (evo[,2])
ymn<- min (evo[,2])
xmx<- max (evo[,1])
xmn<- min (evo[,1])
plot.new()
par (font.lab=1, col.lab="grey20", col.axis="grey50", cex.axis=0.8)
plot.window(xlim=c(xmn, xmx), xaxs="i",
ylim=c(ymn,ymx), yaxs="i")
abline(v=seq(xmn, xmx, by=1), col="grey90", lwd=1)
abline(h=seq(0, ymx,
by=(ymx/10)), col="grey90", lwd=1)
xx = c(xmn, evo$Var1, xmx)
yy = c(0, c(0,perc), 0)
polygon(xx, yy, col=colour, border=bord)
ymx<- max (perc)
ymn<- min (perc)
xmx<- max (evo[,1])
xmn<- min (evo[,1])
plot.new()
par (font.lab=1, col.lab="grey20", col.axis="grey50", cex.axis=0.8)
plot.window(xlim=c(xmn, xmx), xaxs="i",
ylim=c(ymn,ymx), yaxs="i")
abline(v=seq(xmn, xmx, by=1), col="grey90", lwd=1)
abline(h=seq(0, ymx,
by=(ymx/10)), col="grey90", lwd=1)
xx = c(xmn, evo$Var1, xmx)
yy = c(0, c(0,perc), 0)
polygon(xx, yy, col=colour, border=bord)
axis(1)
axis(2, las=1)
mtext("Million years before present", line=3, adj=1, side=1)
mtext(paste ("Percentage of new", rank), line= 3 , adj=0, side=2)
ext<- ext [ext$Var1!=0,]
ext$Var1<- as.numeric (ext$Var1)
perc<- (ext$Freq[1:length (ext$Freq)-1]/ext$Freq[2:length (ext$Freq)])*100
ymx<- max (perc)
ymn<- min (perc)
xmx<- max (ext[,1])
xmn<- min (ext[,1])
plot.new()
par (font.lab=1, col.lab="grey20", col.axis="grey50", cex.axis=0.8)
ylim=c(ymn,ymx), yaxs="i")
abline(v=seq(xmn, xmx, by=1), col="grey90", lwd=1)
abline(h=seq(0, ymx,
plot.window(xlim=c(xmn, xmx), xaxs="i",
plot.new()
par (font.lab=1, col.lab="grey20", col.axis="grey50", cex.axis=0.8)
plot.window(xlim=c(xmn, xmx), xaxs="i",
ylim=c(ymn,ymx), yaxs="i")
abline(v=seq(xmn, xmx, by=1), col="grey90", lwd=1)
abline(h=seq(0, ymx,
by=(ymx/10)), col="grey90", lwd=1)
xx = c(xmn, ext$Var1, xmx)
yy = c(0, c(0,perc), 0)
polygon(xx, yy, col=colour, border=bord)
axis(1)
axis(2, las=1)
mtext("Million years before present", line=3, adj=1, side=1)
mtext(paste ("Percentage of extinct", rank), line= 3 , adj=0, side=2)
install.packages (rAvis)
install.packages ("rAvis")
library (rAvis)
setwd ("C:/Users/sara/Documents/_CIENCIAS/pbdb")
library(rjson)
library(gtools)
library(RCurl)
library(rgdal)
library(ggplot2)
library (testthat)
library(plyr)
source.with.encoding('R/network.R', encoding='UTF-8')
source.with.encoding('R/rest_api_tools.R', encoding='UTF-8')
source.with.encoding('R/pbdb_cache.R', encoding='UTF-8')
source.with.encoding('R/pbdb_rest_api_setup.R', encoding='UTF-8')
source.with.encoding('R/pbdb_querys.R', encoding='UTF-8')
source.with.encoding('R/pbdb_taxonomic_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_geographic_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_temporal_functions.R', encoding='UTF-8')
pbdb_strata (lngmin=0, lngmax=15, latmin=0, latmax=15, rank="formation", vocab="pbdb")
pbdb_occurrence (id=1001, vocab="pbdb", show="coords")
pbdb_taxon (name="Canis", vocab="pbdb", show=c("attr", "app", "size"))
pbdb_taxa (name="Canidae", vocab="pbdb", show=c("attr", "app", "size", "nav"))
pbdb_taxa (name =c("Canis lupus", "Vulpes vulpes"), vocab="pbdb",
show=c("attr", "app", "size", "nav"), rel="common_ancestor")
canis_quaternary<- pbdb_query_occurrences (limit="all",
#vocab= "pbdb",
base_name="Canis",
interval="Quaternary",
show="coords")
canis_quaternary<- pbdb_query_occ (limit="all",
#vocab= "pbdb",
base_name="Canis",
interval="Quaternary",
show="coords")
canis_quaternary<- pbdb_occurrences (limit="all",
#vocab= "pbdb",
base_name="Canis",
interval="Quaternary",
show="coords")
plot_pbdb (canis_quaternary, "Canis Quaternary",
dir="C:/Users/sara/Documents/_CIENCIAS/pbdb_paper")
carnivora<- pbdb_occurrences (limit="all", base_name="Carnivora",
interval="Quaternary", show="coords")
pbdb_reference<-function(id, ...){
l<-list(...)
.pbdb_query('refs/single', query = l)
}
setwd ("C:/Users/sara/Documents/_CIENCIAS/pbdb")
library(rjson)
library(gtools)
library(RCurl)
library(rgdal)
library(ggplot2)
library (testthat)
library(plyr)
source.with.encoding('R/network.R', encoding='UTF-8')
source.with.encoding('R/rest_api_tools.R', encoding='UTF-8')
source.with.encoding('R/pbdb_cache.R', encoding='UTF-8')
source.with.encoding('R/pbdb_rest_api_setup.R', encoding='UTF-8')
source.with.encoding('R/pbdb_querys.R', encoding='UTF-8')
source.with.encoding('R/pbdb_taxonomic_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_geographic_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_temporal_functions.R', encoding='UTF-8')
pbdb_reference(360)
pbdb_reference<-function(id, ...){
l<-list(...)
.pbdb_query('refs/single', query = c(list(id = id), l))
}
pbdb_reference(360)
pbdb_reference(id=360)
.setup_api_endpoint('refs/single', 'refs/single.%s', uri_builder = .pbdb_uri_builder)
pbdb_reference(id=360)
pbdb_reference(360)
.setup_api_endpoint('taxa/refs', 'taxa/refs.%s', uri_builder = .pbdb_uri_builder)
pbdb_ref_taxa <-function(...){
l<-list(...)
.pbdb_query('colls/refs', query = l)
}
pbdb_ref_taxa (name="Canidae", vocab="pbdb", show=c("attr", "app", "size", "nav"))
pbdb_ref_taxa <-function(...){
l<-list(...)
.pbdb_query('taxa/refs', query = l)
}
pbdb_ref_taxa (name="Canidae", vocab="pbdb", show=c("attr", "app", "size", "nav"))
pbdb_ref_taxa (name="Canidae", vocab="pbdb")
pbdb_ref_taxa (name="Canidae")
pbdb_occurrence (id=1001, vocab="pbdb", show="coords")
kk<- pbdb_occurrence (id=1001, vocab="pbdb", show="coords")
is.dataframe (kk)
is.data.frame (kk)
(response)[1]
response<- pbdb_occurrence (id=1001)
expect_true(is.data.frame (response))
names (response)
expect_is (names (response)[1], "character")
expect_is (response[1], "numeric")
response[1]
response<- pbdb_occurrences ("Canis")
response<- pbdb_occurrences (id=c(10, 11))
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
response<- pbdb_occurrence (id=1001)
dim (response)
expect_true (dim (response)[1]==1)
response<- pbdb_occurrences (id=c(10, 11))
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]>=1)
response<- pbdb_collection (id=1003, vocab="pbdb", show="loc")
response
response<- pbdb_collection (id=1003, vocab="pbdb")
response
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]==1)
response<- pbdb_collections (id=c(10, 11))
response
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]>=1)
response<- pbdb_collections_geo (vocab="pbdb", lngmin=0.0, lngmax=15.0, latmin=0.0, latmax=15.0, level=2)
response
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]>=1)
library (rAvis)
?rAvis
avisMapSpecies ("Pica pica", maptype="phys")
avisSpeciesSummary()
avisMapSpecies ("Pica pica", maptype="admin")
avisMapSpecies ("Pica pica", maptype="phys")
pbdb_occurrence (id=1001, vocab="pbdb", show="coords")
pbdb_occurrence (id=1001, show="coords")
response<- pbdb_taxon (name="Canis", vocab="pbdb")
response
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]==1)
expect_true(is.data.frame (response))
context("pbdb_taxa")
test_that("pbdb_taxa output is a dataframe, and the names are characters", {
response<- pbdb_taxa (name="Canidae")
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]==1)
})
response<- pbdb_taxa_auto (name="Canis", limit=10)
expect_true(is.data.frame (response))
response
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]>=1)
context("pbdb_interval")
test_that("pbdb_interval output is a dataframe, and the names are characters", {
response<- pbdb_interval (id=1)
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]>=1)
})
pbdb_interval (id=1)
expect_true (dim (response)[1]==1)
response<- pbdb_interval (id=1)
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]==1)
response<- pbdb_intervals (min_ma= 0, max_ma=2)
response
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]>=1)
response<- pbdb_scale (id=1)
context("pbdb_scale")
test_that("pbdb_scale output is a dataframe, and the names are characters", {
response<- pbdb_scale (id=1)
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]>=1)
})
context("pbdb_scale")
test_that("pbdb_scale output is a dataframe, and the names are characters", {
response<- pbdb_scale (id=1)
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]==1)
})
response<- pbdb_scales ()
pbdb_scales ()
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]>=1)
pbdb_strata (lngmin=0, lngmax=15, latmin=0, latmax=15, rank="formation", vocab="pbdb")
response<- pbdb_strata (lngmin=0, lngmax=5, latmin=0, latmax=5, rank="formation")
response
response<- pbdb_strata (lngmin=0, lngmax=15, latmin=0, latmax=5, rank="formation")
response
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]>=1)
response<- pbdb_strata_auto (name= "Pin")
response
test_that("pbdb_strata_auto output is a dataframe, and the names are characters", {
response<- pbdb_strata_auto (name= "Pin")
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]>=1)
})
expect_true (dim (response)[1]>=1)
response<- pbdb_reference (id=360)
response
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]==1)
response<- pbdb_references (author="Turner")
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]>=1)
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]>=1)
response<- pbdb_ref_occurrences (taxon_name="Canis", year=2000)
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]>=1)
response
context("pbdb_ref_collections")
test_that("pbdb_ref_collections output is a dataframe, and the names are characters", {
response<- pbdb_ref_collections (id=1)
response<- pbdb_ref_collections (id=1)
response
response<- pbdb_ref_collections (id=c(1,2)
)
response
response<- pbdb_ref_collections (id=2)
response
response<- pbdb_ref_collections (id=1)
response
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]>=1)
context(" pbdb_ref_taxa")
test_that(" pbdb_ref_taxa output is a dataframe, and the names are characters", {
response<- pbdb_ref_taxa (name="Canidae")
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]>=1)
})
response
response<- pbdb_ref_taxa (name="Canidae")
expect_true(is.data.frame (response))
expect_is (names (response)[1], "character")
expect_true (dim (response)[1]>=1)
response
?plot
