ylim=c(ymm-1, ymx+1))
lines (ext, type="o", pch=16, col="red")
axis (1)
axis (2)
}
pbdb_ext_evo (canis)
canis<-  pbdb_query_occurrences (limit="all", vocab="pbdb",
base_name="Panthera",
show="coords")
pbdb_time_spam (canis, rank="species")
pbdb_ext_evo (canis)
canis<-  pbdb_query_occurrences (limit="all", vocab="pbdb",
base_name="Carnidae",
canis<-  pbdb_query_occurrences (limit="all", vocab="pbdb",
base_name="Canidae",
show="coords")
pbdb_ext_evo<- function (data, rank="species") {
species<- data [data$taxon_rank==rank, ]
max_sp<- aggregate(species$early_age, list(species$taxon_name), max)
min_sp<- aggregate(species$late_age, list(species$taxon_name), min)
temporal_range<- data.frame (max_sp [,2], min_sp[,2])
row.names (temporal_range)<- max_sp[,1]
colnames (temporal_range)<- c("max", "min")
temporal_range<- temporal_range[with(temporal_range, order(-max, min)), ]
evo<- as.data.frame (table (temporal_range[,1]), stringsAsFactors=F)
ext<- as.data.frame (table (temporal_range[,2]), stringsAsFactors=F)
ext<- ext [ext$Var1!=0,]
evo$Var1<- as.numeric (evo$Var1)
ext$Var1<- as.numeric (ext$Var1)
ymx<- max (c(evo[,2], ext[,2]))
ymm<- min (c(evo[,2], ext[,2]))
xmx<- max (c(evo[,1], ext[,1]))
xmm<- min (c(evo[,1], ext[,1]))
par (mar=c(4,4,2,2))
plot (evo, xlab="Time (Ma)", type="o", pch=16,
ylab="Number of taxa", axes=FALSE, xlim=c(xmm-1, xmx+1),
ylim=c(ymm-1, ymx+1))
lines (ext, type="o", pch=16, col="red")
legend(xmx-2, ymx-2, c("evolution","extinction"), cex=0.8,
col=c("black","red"), pch=16:16, lty=1:2);
axis (1)
axis (2)
}
pbdb_ext_evo (canis)
legend(xmx-4, ymx-2, c("evolution","extinction"), cex=0.8,
col=c("black","red"), pch=16:16, lty=1:2);
legend(xmx-3, ymx-2, c("evolution","extinction"), cex=0.8,
col=c("black","red"), pch=16:16, lty=1:2);
legend(xmx-2, ymx-2, c("evolution","extinction"), cex=0.8,
col=c("black","red"), pch=16:16, lty=1:2);
legend("topright", c("evolution","extinction"), cex=0.8,
col=c("black","red"), pch=16:16, lty=1:2);
#' @usage pbdb_ext_evo (data)
#'
pbdb_ext_evo<- function (data, rank="species") {
species<- data [data$taxon_rank==rank, ]
max_sp<- aggregate(species$early_age, list(species$taxon_name), max)
min_sp<- aggregate(species$late_age, list(species$taxon_name), min)
temporal_range<- data.frame (max_sp [,2], min_sp[,2])
row.names (temporal_range)<- max_sp[,1]
colnames (temporal_range)<- c("max", "min")
temporal_range<- temporal_range[with(temporal_range, order(-max, min)), ]
evo<- as.data.frame (table (temporal_range[,1]), stringsAsFactors=F)
ext<- as.data.frame (table (temporal_range[,2]), stringsAsFactors=F)
ext<- ext [ext$Var1!=0,]
evo$Var1<- as.numeric (evo$Var1)
ext$Var1<- as.numeric (ext$Var1)
ymx<- max (c(evo[,2], ext[,2]))
ymm<- min (c(evo[,2], ext[,2]))
xmx<- max (c(evo[,1], ext[,1]))
xmm<- min (c(evo[,1], ext[,1]))
par (mar=c(4,4,2,2))
plot (evo, xlab="Time (Ma)", type="o", pch=16,
ylab="Number of taxa", axes=FALSE, xlim=c(xmm-1, xmx+1),
ylim=c(ymm-1, ymx+1))
lines (ext, type="o", pch=16, col="red")
legend("topright", c("evolution","extinction"), cex=0.8,
col=c("black","red"), pch=16:16, lty=1:2);
axis (1)
axis (2)
}
pbdb_ext_evo (canis)
pbdb_ext_evo (canis, rank="genus")
pbdb_ext_evo (canis, rank="species")
head (canis)
data<- canis
species<- data [data$taxon_rank==rank, ]
max_sp<- aggregate(species$early_age, list(species$taxon_name), max)
min_sp<- aggregate(species$late_age, list(species$taxon_name), min)
temporal_range<- data.frame (max_sp [,2], min_sp[,2])
row.names (temporal_range)<- max_sp[,1]
colnames (temporal_range)<- c("max", "min")
temporal_range<- temporal_range[with(temporal_range, order(-max, min)), ]
temporal_range
temporal_range [,1]>50
temporal_range [,1]>30
temporal_range [,1]>30 & temporal_range [,1]<40
time<- c(0:50)
resolution<- 1
temporal_extent<- c(0:50)
temporal_extent
te<- temporal_extent
temporal_range [,1]>te [1] & temporal_range [,1]<te [2]
a<- temporal_range [,1]>te [1] & temporal_range [,2]<te [i+1]
a<- temporal_range [,1]>te [1] & temporal_range [,2]<te [2]
temporal_range [,1]>te [1] & temporal_range [,2]<te [2]
te
te-1
min(te):max(te)-1
min(te)
min(te):(max(te)-1))
min(te):(max(te)-1)
min(te)+1:(max(te)-1)
te<- temporal_extent
a<- temporal_range [,1]>te [min(te)] & temporal_range [,2]<te [min(te)+1]
a
temporal_range [,1]>te [min(te)] & temporal_range [,2]<te [min(te)+1]
a<- temporal_range [,1]>min(te) & temporal_range [,2]<min(te)+1
a
min(te)+1:(max(te)-1)
for (i in min(te)+1:(max(te)-1)){
b<- temporal_range [,1]>te [i] & temporal_range [,2]<te [i+1]
a<- cbind (a,b)
}
a
a+0
colSums (a+0)
plot (colSums (a+0))
plot (colSums (a+0), type="o", pch=16)
plot (colSums (a+0), type="o", pch=16, ylab="Richness", xlab="Time (Ma")
plot (colSums (a+0), type="o", pch=16, ylab="Richness", xlab="Time (Ma)")
plot (colSums (a+0), type="o", pch=16, ylab="Richness", xlab="Time (Ma)", axes=F)
axis (1)
axis (2)
pbdb_richness <- function (rank= "species", resolution=1, temporal_extent=c(0,100)){
species<- data [data$taxon_rank==rank, ]
max_sp<- aggregate(species$early_age, list(species$taxon_name), max)
min_sp<- aggregate(species$late_age, list(species$taxon_name), min)
temporal_range<- data.frame (max_sp [,2], min_sp[,2])
row.names (temporal_range)<- max_sp[,1]
colnames (temporal_range)<- c("max", "min")
temporal_range<- temporal_range[with(temporal_range, order(-max, min)), ]
te<- temporal_extent
a<- temporal_range [,1]>min(te) & temporal_range [,2]<min(te)+1
for (i in min(te)+1:(max(te)-1)){
b<- temporal_range [,1]>te [i] & temporal_range [,2]<te [i+1]
a<- cbind (a,b)
}
plot (colSums (a+0), type="o", pch=16, ylab="Richness", xlab="Time (Ma)", axes=F)
axis (1)
axis (2)
return (a+0)
}
setwd ("C:/Users/sara/Documents/_CIENCIAS/pbdb")
library(rjson)
library(gtools)
library(RCurl)
library(rgdal)
library(ggplot2)
library (testthat)
library(plyr)
source.with.encoding('R/network.R', encoding='UTF-8')
source.with.encoding('R/rest_api_tools.R', encoding='UTF-8')
source.with.encoding('R/pbdb_cache.R', encoding='UTF-8')
source.with.encoding('R/pbdb_rest_api_setup.R', encoding='UTF-8')
source.with.encoding('R/pbdb_querys.R', encoding='UTF-8')
source.with.encoding('R/pbdb_taxonomic_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_geographic_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_temporal_functions.R', encoding='UTF-8')
pbdb_occurrences (id=c(10, 11))
setwd ("C:/Users/sara/Documents/_CIENCIAS/pbdb")
library(rjson)
library(gtools)
library(RCurl)
library(rgdal)
library(ggplot2)
library (testthat)
library(plyr)
source.with.encoding('R/network.R', encoding='UTF-8')
source.with.encoding('R/rest_api_tools.R', encoding='UTF-8')
source.with.encoding('R/pbdb_cache.R', encoding='UTF-8')
source.with.encoding('R/pbdb_rest_api_setup.R', encoding='UTF-8')
source.with.encoding('R/pbdb_querys.R', encoding='UTF-8')
source.with.encoding('R/pbdb_taxonomic_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_geographic_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_temporal_functions.R', encoding='UTF-8')
pbdb_occurrences (id=c(10, 11))
pbdb_collection (id=1)
pbdb_collections (limit=100, base_name="Cetacea")
pbdb_scales ()
pbdb_occurrences (limit="50", vocab= "pbdb", base_name="Canis", show="coords")
canis<- pbdb_occurrences (limit="50", vocab= "pbdb", base_name="Canis", show="coords")
plot_pbdb (canis, "Canis",
dir="C:/Users/sara/Documents/_CIENCIAS/pbdb_paper")
wmap <- readOGR(dsn="maps/ne_110m_land.shp", layer="ne_110m_land")
wmap_wintri <- spTransform(wmap, CRS("+proj=wintri"))
setwd ("C:/Users/sara/Documents/_CIENCIAS/pbdb")
library(rjson)
library(gtools)
library(RCurl)
library(rgdal)
library(ggplot2)
library (testthat)
library(plyr)
source.with.encoding('R/network.R', encoding='UTF-8')
source.with.encoding('R/rest_api_tools.R', encoding='UTF-8')
source.with.encoding('R/pbdb_cache.R', encoding='UTF-8')
source.with.encoding('R/pbdb_rest_api_setup.R', encoding='UTF-8')
source.with.encoding('R/pbdb_querys.R', encoding='UTF-8')
source.with.encoding('R/pbdb_taxonomic_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_geographic_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_temporal_functions.R', encoding='UTF-8')
setwd ("C:/Users/sara/Documents/_CIENCIAS/pbdb")
library(rjson)
library(gtools)
library(RCurl)
library(rgdal)
library(ggplot2)
library (testthat)
library(plyr)
source.with.encoding('R/network.R', encoding='UTF-8')
source.with.encoding('R/rest_api_tools.R', encoding='UTF-8')
source.with.encoding('R/pbdb_cache.R', encoding='UTF-8')
source.with.encoding('R/pbdb_rest_api_setup.R', encoding='UTF-8')
source.with.encoding('R/pbdb_querys.R', encoding='UTF-8')
source.with.encoding('R/pbdb_taxonomic_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_geographic_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_temporal_functions.R', encoding='UTF-8')
plot_pbdb (canis, "Canis",
dir="C:/Users/sara/Documents/_CIENCIAS/pbdb_paper")
.cache_bbox<- function (){
bbox <- readOGR("maps/ne_110m_wgs84_bounding_box.shp", layer="ne_110m_wgs84_bounding_box")
bbox_wintri <- spTransform(bbox, CRS("+proj=wintri"))
bbox_wintri
}
plot_pbdb (canis, "Canis",
dir="C:/Users/sara/Documents/_CIENCIAS/pbdb_paper")
bbox <- readOGR("maps/ne_110m_wgs84_bounding_box.shp", layer="ne_110m_wgs84_bounding_box")
bbox_wintri <- spTransform(bbox, CRS("+proj=wintri"))
bbox_wintri
plot_pbdb (canis, "Canis",
dir="C:/Users/sara/Documents/_CIENCIAS/pbdb_paper")
theme_opts <- list(theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill="white"),
panel.border = element_blank(),
axis.text.x = element_blank(),
axis.line = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=22)))
axis.ticks = element_blank(),
p<- ggplot(bbox_wintri, aes(long,lat, group=group)) +
geom_polygon(fill="black") +
geom_polygon(data=countries_wintri,
aes(long,lat, group=group, fill=hole)) +
theme_opts <- list(theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill="white"),
panel.border = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=22)))
theme_opts <- list(theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill="white"),
panel.border = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=22)))
p<- ggplot(bbox_wintri, aes(long,lat, group=group)) +
geom_polygon(fill="black") +
geom_polygon(data=countries_wintri,
aes(long,lat, group=group, fill=hole)) +
geom_path(data=countries_wintri,
aes(long,lat, group=group, fill=hole),
color="grey50", size=0.3) +
# geom_path(data=grat_wintri, aes(long, lat, group=group, fill=NULL), linetype=3, color="grey60") +
coord_equal(ratio=1) +
theme_opts +
scale_fill_manual(values=c("white", "white"), guide="none") # remove legend
p
bbox_wintri
canis<- pbdb_occurrences (limit="50", vocab= "pbdb", base_name="Canis", show="coords")
head (canis)
canis_sbtx<- pbdb_subtaxa (canis)
pbdb_occurrences (limit=10, base_name="Canidae", interval="Quaternary", show="coords")
pbdb_occurrences (limit=10, base_name="Canidae", interval="Quaternary", show="coords",
vocab="pbdb")
pbdb_subtaxa (canis)
pbdb_subtaxa (canis_quaternary)
carnivora<- pbdb_occurrences (limit="all", base_name="Carnivora", interval="Quaternary", show="coords")
pbdb_subtaxa (canivora)
carnivora<- pbdb_occurrences (limit="all", base_name="Carnivora",
interval="Quaternary", show="coords")
pbdb_subtaxa (carnivora)
pbdb_richness <- function (rank= "species", resolution=1, temporal_extent=c(0,100)){
species<- data [data$taxon_rank==rank, ]
max_sp<- aggregate(species$early_age, list(species$taxon_name), max)
min_sp<- aggregate(species$late_age, list(species$taxon_name), min)
temporal_range<- data.frame (max_sp [,2], min_sp[,2])
row.names (temporal_range)<- max_sp[,1]
colnames (temporal_range)<- c("max", "min")
temporal_range<- temporal_range[with(temporal_range, order(-max, min)), ]
te<- temporal_extent
a<- temporal_range [,1]>min(te) & temporal_range [,2]<min(te)+1
for (i in min(te)+1:(max(te)-1)){
b<- temporal_range [,1]>te [i] & temporal_range [,2]<te [i+1]
a<- cbind (a,b)
}
plot (colSums (a+0), type="o", pch=16, ylab="Richness", xlab="Time (Ma)", axes=F)
axis (1)
axis (2)
return (a+0)
}
pbdb_richness (carnivora)
pbdb_temporal_resolution (canidae_quat)
pbdb_temporal_resolution (carnivora)
pbdb_temporal_resolution (carnivora)
pbdb_subtaxa<- function (data, col="skyblue2",
do.plot= TRUE, show=c("species", "genera", "tribes", "subfamilies", "families","superfamilies",
"orders", "classes", "subclasses", "subphyla", "phyla")){
if('rnk' %in% colnames(data)) {
number_subphyla<- length(which (data$rnk== 25))
number_phyla<- length(which (data$rnk== 20))
number_class_plants_invertebrates<- length(which (data$rnk== 17))
number_subclass<- length(which (data$rnk== 16))
number_class<- length(which (data$rnk== 15))
number_order<- length(which (data$rnk== 13))
number_superfamilies<- length(which (data$rnk== 10))
number_families<- length(which (data$rnk== 9))
number_subfamilies<- length(which (data$rnk== 8))
number_tribes<- length(which (data$rnk== 7))
number_genera<- length(which (data$rnk== 5))
number_species<- length(which (data$rnk== 3))
all<- c("species", "genera", "tribes", "subfamilies", "families","superfamilies",
"orders",  "subclasses", "classes","subphyla", "phyla")
subtaxa<- data.frame( number_species, number_genera, number_tribes, number_subfamilies, number_families,
number_superfamilies, number_order, number_subclass, number_class, number_subphyla, number_phyla)
names (subtaxa)<- all
subt<- subtaxa [,match (show, all)]} else {
stop ("variable names should have the 3-letters code (the default in the query to PBDB)" )
}
if (do.plot==TRUE){
par (mar=c(8,4,2,0))
barplot (unlist ( subtaxa [,match (show, all)]),
beside = T, horiz=F,
col=col,
border=F,
las=2)
}
return (subt)
}
pbdb_subtaxa (carnivora)
pbdb_ext_evo (carnivora, rank="species")
carnivora
head (carnivora)
names (carnivora)
names (canis_quaternary)
carnivora$rnk
(carnivora$rnk!=NULL)
dim (carnivora$rnk)
lenght (carnivora$rnk)
length (carnivora$rnk)
length (carnivora$rnks)
source.with.encoding('R/pbdb_taxonomic_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_geographic_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_temporal_functions.R', encoding='UTF-8')
pbdb_ext_evo (carnivora, rank="species")
source.with.encoding('R/pbdb_temporal_functions.R', encoding='UTF-8')
pbdb_ext_evo (carnivora, rank="species")
names (carnivora)
source.with.encoding('R/pbdb_temporal_functions.R', encoding='UTF-8')
pbdb_ext_evo (carnivora, rank="species")
source.with.encoding('R/pbdb_temporal_functions.R', encoding='UTF-8')
pbdb_ext_evo (carnivora, rank="species")
species<- data [data$rnk==rank, ]
max_sp<- aggregate(species$eag, list(species$tna), max)
min_sp<- aggregate(species$lag, list(species$tna), min)
data<- carnivora
species<- data [data$rnk==rank, ]
rank="species"
species<- data [data$rnk==rank, ]
max_sp<- aggregate(species$eag, list(species$tna), max)
head (carnivora)
rank<- data.frame (c("species", "genera", "families", "orders", "classes"),
c(3,5,9,13,15))
rank
rnk<- data.frame (c("species", "genera", "families", "orders", "classes"),
c(3,5,9,13,15))
rank<- "species"
match (rank, rnk)
match (rank, rnk[,1])
rnk [match (rank, rnk[,1]), 2]
source.with.encoding('R/pbdb_temporal_functions.R', encoding='UTF-8')
pbdb_ext_evo (carnivora, rank="species")
source.with.encoding('R/pbdb_temporal_functions.R', encoding='UTF-8')
pbdb_ext_evo (carnivora, rank="species")
species<- data [data$taxon_rank==rank, ]
max_sp<- aggregate(species$early_age, list(species$taxon_name), max)
source.with.encoding('R/pbdb_temporal_functions.R', encoding='UTF-8')
pbdb_richness (carnivora)
rnk<- data.frame (c("species", "genera", "families", "orders", "classes"),
c(3,5,9,13,15))
rnkk<- rnk [match (rank, rnk[,1]), 2]
species<- data [data$rnk==rnkk, ]
max_sp<- aggregate(species$eag, list(species$tna), max)
min_sp<- aggregate(species$eag, list(species$tna), min)
temporal_range<- data.frame (max_sp [,2], min_sp[,2])
row.names (temporal_range)<- max_sp[,1]
colnames (temporal_range)<- c("max", "min")
temporal_range<- temporal_range[with(temporal_range, order(-max, min)), ]
te<- temporal_extent
te<- 1
a<- temporal_range [,1]>min(te) & temporal_range [,2]<min(te)+1
for (i in min(te)+1:(max(te)-1)){
b<- temporal_range [,1]>te [i] & temporal_range [,2]<te [i+1]
a<- cbind (a,b)
}
plot (colSums (a+0), type="o", pch=16, ylab="Richness", xlab="Time (Ma)", axes=F)
axis (1)
axis (2)
return (a+0)
a
a+0
colSums (a+0)
plot (colSums (a+0, na.rm=T), type="o", pch=16, ylab="Richness", xlab="Time (Ma)", axes=F)
axis (1)
axis (2)
return (a+0)
source.with.encoding('R/pbdb_temporal_functions.R', encoding='UTF-8')
pbdb_richness (carnivora)
rnkk<- rnk [match (rank, rnk[,1]), 2]
rnkk
species<- data [data$rnk==rnkk, ]
species
pbdb_richness (carnivora)
rnk<- data.frame (c("species", "genera", "families", "orders", "classes"),
c(3,5,9,13,15))
rnkk<- rnk [match (rank, rnk[,1]), 2]
species<- data [data$rnk==rnkk, ]
max_sp<- aggregate(species$eag, list(species$tna), max)
min_sp<- aggregate(species$eag, list(species$tna), min)
temporal_range<- data.frame (max_sp [,2], min_sp[,2])
row.names (temporal_range)<- max_sp[,1]
colnames (temporal_range)<- c("max", "min")
temporal_range<- temporal_range[with(temporal_range, order(-max, min)), ]
te<- temporal_extent
a<- temporal_range [,1]>min(te) & temporal_range [,2]<min(te)+1
for (i in min(te)+1:(max(te)-1)){
b<- temporal_range [,1]>te [i] & temporal_range [,2]<te [i+1]
a<- cbind (a,b)
}
plot (colSums (a+0, na.rm=T), type="o", pch=16, ylab="Richness", xlab="Time (Ma)", axes=F)
axis (1)
axis (2)
resolution=1
temporal_extent=c(0,100)
rnk<- data.frame (c("species", "genera", "families", "orders", "classes"),
c(3,5,9,13,15))
rnkk<- rnk [match (rank, rnk[,1]), 2]
species<- data [data$rnk==rnkk, ]
max_sp<- aggregate(species$eag, list(species$tna), max)
min_sp<- aggregate(species$eag, list(species$tna), min)
temporal_range<- data.frame (max_sp [,2], min_sp[,2])
row.names (temporal_range)<- max_sp[,1]
colnames (temporal_range)<- c("max", "min")
temporal_range<- temporal_range[with(temporal_range, order(-max, min)), ]
te<- temporal_extent
a<- temporal_range [,1]>min(te) & temporal_range [,2]<min(te)+1
for (i in min(te)+1:(max(te)-1)){
b<- temporal_range [,1]>te [i] & temporal_range [,2]<te [i+1]
a<- cbind (a,b)
}
plot (colSums (a+0, na.rm=T), type="o", pch=16, ylab=paste ("Number of", rank), xlab="Time (Ma)", axes=F)
axis (1)
axis (2)
return (a+0)
source.with.encoding('R/pbdb_temporal_functions.R', encoding='UTF-8')
pbdb_richness (carnivora)
rank= "species"
rnk<- data.frame (c("species", "genera", "families", "orders", "classes"),
c(3,5,9,13,15))
rnkk<- rnk [match (rank, rnk[,1]), 2]
species<- data [data$rnk==rnkk, ]
max_sp<- aggregate(species$eag, list(species$tna), max)
min_sp<- aggregate(species$eag, list(species$tna), min)
temporal_range<- data.frame (max_sp [,2], min_sp[,2])
row.names (temporal_range)<- max_sp[,1]
colnames (temporal_range)<- c("max", "min")
temporal_range<- temporal_range[with(temporal_range, order(-max, min)), ]
te<- temporal_extent
a<- temporal_range [,1]>min(te) & temporal_range [,2]<min(te)+1
for (i in min(te)+1:(max(te)-1)){
b<- temporal_range [,1]>te [i] & temporal_range [,2]<te [i+1]
a<- cbind (a,b)
}
plot (colSums (a+0, na.rm=T), type="o", pch=16, ylab=paste ("Number of", rank), xlab="Time (Ma)", axes=F)
colnames (temporal_range)<- c("max", "min")
temporal_range
