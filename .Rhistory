plot(c(min (t_range$min), max (t_range$max)),
c(0, dim (t_range)[1]),
type = "n",axes = FALSE, xlab = "Time (Ma)", ylab = "")
segments(x0 = t_range$min,
y0 = t_range$pos,
x1 = t_range$max,
y1 = t_range$pos,
col = col,
lwd = 6,
lend = 2)
axis(1, col="gray30", cex.axis=0.8)
if (names==TRUE){
text(x = t_range$min, y = t_range$pos +0.3,
labels = row.names (t_range), adj=c(0,0), cex=0.8, col="gray30")
}
}
plot_time_spam (canis_quaternary, rank="species", col="skyblue2", names=TRUE)
plot_time_spam (canis_quaternary, rank="species", col="skyblue2",
names=FALSE)
plot_time_spam (canis_quaternary, rank="species", col="red",
names=FALSE)
plot_time_spam (canis_quaternary, rank="species",
names=FALSE)
plot_time_spam (canis_quaternary, rank="species", col="skyblue2"
names=TRUE)
plot_time_spam (canis_quaternary, rank="species",
names=TRUE)
number_of_subtaxa (canidae_quat)
temporal_resolution (canidae_quat)
plot_time_spam (canis_quaternary, rank="species",
names=TRUE)
plot_time_spam (canis_quaternary, rank="genus",
names=TRUE)
plot_time_spam (canis_quaternary, rank="species",
names=TRUE)
plot_time_spam (canis_quaternary, rank="species",
names=FALSE)
plot_time_spam (canis_quaternary, rank="species",col="red",
names=FALSE)
query<- canis_0_2
name<- "Canis"
col="turquoise1"
dir="C:/Users/sara/Documents/_CIENCIAS/pbdb_paper"
wmap <- readOGR(dsn="maps/ne_110m_land.shp", layer="ne_110m_land")
bbox <- readOGR("maps/ne_110m_wgs84_bounding_box.shp", layer="ne_110m_wgs84_bounding_box")
countries <- readOGR("maps/ne_110m_admin_0_countries.shp", layer="ne_110m_admin_0_countries")
countries_wintri <- spTransform(countries, CRS("+proj=wintri"))
bbox_wintri <- spTransform(bbox, CRS("+proj=wintri"))
wmap_wintri <- spTransform(wmap, CRS("+proj=wintri"))
latlong <- project(cbind(query[,11], query[,12]), proj="+proj=wintri")
latlong<- as.data.frame (latlong)
names (latlong)<- c("lng", "lat")
counts<- ddply(latlong,.(lng,lat),nrow)
theme_opts <- list(theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill="white"),
panel.border = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=22)))
d
d
d
latlong <- project(cbind(query[,11], query[,12]), proj="+proj=wintri")
latlong<- as.data.frame (latlong)
names (latlong)<- c("lng", "lat")
counts<- ddply(latlong,.(lng,lat),nrow)
p<- ggplot(bbox_wintri, aes(long,lat, group=group)) +
geom_polygon(fill="black") +
geom_polygon(data=countries_wintri,
aes(long,lat, group=group, fill=hole)) +
geom_point(data=counts,
aes(counts$lng, counts$lat,
group=NULL, fill=NULL,
size=counts$V1),
color=col, alpha=0.5) +
geom_path(data=countries_wintri,
aes(long,lat, group=group, fill=hole),
color="grey50", size=0.3) +
# geom_path(data=grat_wintri, aes(long, lat, group=group, fill=NULL), linetype=3, color="grey60") +
labs(title=name) +
coord_equal(ratio=1) +
theme_opts +
scale_fill_manual(values=c("white", "white"), guide="none") + # remove legend
scale_size_continuous(limits=c(1,20), guide="none") # remove legend
plot (p)
plot_pbdb<- function (query, name, col="turquoise1", dir){
# read shapefile
wmap <- readOGR(dsn="maps/ne_110m_land.shp", layer="ne_110m_land")
bbox <- readOGR("maps/ne_110m_wgs84_bounding_box.shp", layer="ne_110m_wgs84_bounding_box")
countries <- readOGR("maps/ne_110m_admin_0_countries.shp", layer="ne_110m_admin_0_countries")
# Winkel tripel projection
countries_wintri <- spTransform(countries, CRS("+proj=wintri"))
bbox_wintri <- spTransform(bbox, CRS("+proj=wintri"))
wmap_wintri <- spTransform(wmap, CRS("+proj=wintri"))
# create a blank ggplot theme
theme_opts <- list(theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill="white"),
panel.border = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=22)))
#read data and project using winkel tripel projection
latlong <- project(cbind(query[,11], query[,12]), proj="+proj=wintri")
latlong<- as.data.frame (latlong)
names (latlong)<- c("lng", "lat")
counts<- ddply(latlong,.(lng,lat),nrow)
#plot (the size of the points is the number of records in the site)
p<- ggplot(bbox_wintri, aes(long,lat, group=group)) +
geom_polygon(fill="black") +
geom_polygon(data=countries_wintri,
aes(long,lat, group=group, fill=hole)) +
geom_point(data=counts,
aes(counts$lng, counts$lat,
group=NULL, fill=NULL,
size=counts$V1),
color=col, alpha=0.5) +
geom_path(data=countries_wintri,
aes(long,lat, group=group, fill=hole),
color="grey50", size=0.3) +
# geom_path(data=grat_wintri, aes(long, lat, group=group, fill=NULL), linetype=3, color="grey60") +
labs(title=name) +
coord_equal(ratio=1) +
theme_opts +
scale_fill_manual(values=c("white", "white"), guide="none") + # remove legend
scale_size_continuous(limits=c(1,20), guide="none") # remove legend
plot (p)
ggsave(plot=p, paste (dir,"/", name, ".png", sep=""), width=12.5, height=8.25, dpi=300)
}
canis_quaternary
plot_pbdb (canis_quaternary, "Canis Quaternary",
dir="C:/Users/sara/Documents/_CIENCIAS/pbdb_paper")
plot_pbdb (query= canis_0_2, name= "Canis (0-2 Ma)",
dir="C:/Users/sara/Documents/_CIENCIAS/pbdb_paper")
setwd ("C:/Users/sara/Documents/_CIENCIAS/pbdb")
library(rjson)
library(gtools)
library(RCurl)
library(rgdal)
library(ggplot2)
library (testthat)
library(plyr)
source.with.encoding('R/network.R', encoding='UTF-8')
source.with.encoding('R/rest_api_tools.R', encoding='UTF-8')
source.with.encoding('R/rpbdb_cache.R', encoding='UTF-8')
source.with.encoding('R/rpbdb_rest_api_setup.R', encoding='UTF-8')
source.with.encoding('R/rpbdb_querys.R', encoding='UTF-8')
setwd ("C:/Users/sara/Documents/_CIENCIAS/pbdb")
library(rjson)
library(gtools)
library(RCurl)
library(rgdal)
library(ggplot2)
library (testthat)
library(plyr)
source.with.encoding('R/network.R', encoding='UTF-8')
source.with.encoding('R/rest_api_tools.R', encoding='UTF-8')
source.with.encoding('R/rpbdb_cache.R', encoding='UTF-8')
source.with.encoding('R/rpbdb_rest_api_setup.R', encoding='UTF-8')
source.with.encoding('R/rpbdb_querys.R', encoding='UTF-8')
source.with.encoding('R/rpbdb_querys.R', encoding='UTF-8')
source.with.encoding('R/rpbdb_taxonomic_functions.R', encoding='UTF-8')
source.with.encoding('R/rpbdb_geographic_functions.R', encoding='UTF-8')
source.with.encoding('R/rpbdb_temporal_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_cache.R', encoding='UTF-8')
source.with.encoding('R/pbdb_rest_api_setup.R', encoding='UTF-8')
source.with.encoding('R/pbdb_querys.R', encoding='UTF-8')
source.with.encoding('R/pbdb_querys.R', encoding='UTF-8')
source.with.encoding('R/pbdb_taxonomic_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_geographic_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_temporal_functions.R', encoding='UTF-8')
canis<- pbdb_query_occurrences (limit="100",
vocab= "pbdb",
base_name="Canis",
show="coords")
plot_pbdb (query= canis, name="Canis", col="turquoise1",
dir="C:/Users/sara/Documents/_CIENCIAS/pbdb_paper")
plot_pbdb (canis, "Canis",
dir="C:/Users/sara/Documents/_CIENCIAS/pbdb_paper")
.cache_wmap<- function (){
wmap <- readOGR(dsn="maps/ne_110m_land.shp", layer="ne_110m_land")
wmap_wintri <- spTransform(wmap, CRS("+proj=wintri"))
wmap_wintri
}
.cache_bbox<- function (){
bbox <- readOGR("maps/ne_110m_wgs84_bounding_box.shp", layer="ne_110m_wgs84_bounding_box")
bbox_wintri <- spTransform(bbox, CRS("+proj=wintri"))
}
.cache_countries<- function (){
countries <- readOGR("maps/ne_110m_admin_0_countries.shp", layer="ne_110m_admin_0_countries")
countries_wintri <- spTransform(countries, CRS("+proj=wintri"))
countries_wintri
}
.cache_theme_plot<- function (){
# create a blank ggplot theme
theme_opts <- list(theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill="white"),
panel.border = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=22)))
theme_opts
}
.cache_wmap()
.cache_bbox ()
.cache_countries ()
.cache_theme_plot ()
.cache_wmap()
wmap_wintri<- .cache_wmap()
bbox_wintri<- .cache_bbox ()
countries_wintri<- .cache_countries ()
theme_opts<- .cache_theme_plot ()
is.null (bbox_wintri)
is.null (bbox_wintr)
exists(bbox_wintr)
exists (bbox_wintri)
exists ("bbox_wintri")
exists ("bbox_winti")
kk<- function (query){
latlong <- project(cbind(query$lng, query$lat), proj="+proj=wintri")
latlong<- as.data.frame (latlong)
names (latlong)<- c("lng", "lat")
counts<- ddply(latlong,.(lng,lat),nrow)
counts
}
canidae_quat<-  pbdb_query_occurrences (limit="all",
base_name="Canidae",
interval="Quaternary",
show="coords")
canis_0_2<- pbdb_query_occurrences (limit=100,
vocab= "pbdb",
base_name="Canis",
min_ma = 0,
max_ma = 2,
show="coords")
kk<- function (query){
latlong <- project(cbind(query$lng, query$lat), proj="+proj=wintri")
latlong<- as.data.frame (latlong)
names (latlong)<- c("lng", "lat")
counts<- ddply(latlong,.(lng,lat),nrow)
counts
}
kk (canis_0_2)
kk (canis)
p<- ggplot(bbox_wintri, aes(long,lat, group=group)) +
geom_polygon(fill="black") +
geom_polygon(data=countries_wintri,
aes(long,lat, group=group, fill=hole)) +
geom_point(data=counts,
aes(counts$lng, counts$lat,
group=NULL, fill=NULL,
size=counts$V1),
color=col, alpha=0.5) +
geom_path(data=countries_wintri,
aes(long,lat, group=group, fill=hole),
color="grey50", size=0.3) +
# geom_path(data=grat_wintri, aes(long, lat, group=group, fill=NULL), linetype=3, color="grey60") +
labs(title=name) +
coord_equal(ratio=1) +
theme_opts +
scale_fill_manual(values=c("white", "white"), guide="none") + # remove legend
scale_size_continuous(limits=c(1,20), guide="none") # remove legend
latlong <- project(cbind(query$lng, query$lat), proj="+proj=wintri")
latlong<- as.data.frame (latlong)
names (latlong)<- c("lng", "lat")
counts<- ddply(latlong,.(lng,lat),nrow)
counts
p<- ggplot(bbox_wintri, aes(long,lat, group=group)) +
geom_polygon(fill="black") +
geom_polygon(data=countries_wintri,
aes(long,lat, group=group, fill=hole)) +
geom_point(data=counts,
aes(counts$lng, counts$lat,
group=NULL, fill=NULL,
size=counts$V1),
color=col, alpha=0.5) +
geom_path(data=countries_wintri,
aes(long,lat, group=group, fill=hole),
color="grey50", size=0.3) +
# geom_path(data=grat_wintri, aes(long, lat, group=group, fill=NULL), linetype=3, color="grey60") +
labs(title=name) +
coord_equal(ratio=1) +
theme_opts +
scale_fill_manual(values=c("white", "white"), guide="none") + # remove legend
scale_size_continuous(limits=c(1,20), guide="none") # remove legend
plot (p)
p<- ggplot(bbox_wintri, aes(long,lat, group=group)) +
geom_polygon(fill="black") +
geom_polygon(data=countries_wintri,
aes(long,lat, group=group, fill=hole)) +
geom_path(data=countries_wintri,
aes(long,lat, group=group, fill=hole),
color="grey50", size=0.3) +
# geom_path(data=grat_wintri, aes(long, lat, group=group, fill=NULL), linetype=3, color="grey60") +
coord_equal(ratio=1) +
theme_opts +
scale_fill_manual(values=c("white", "white"), guide="none") + # remove legend
p<- ggplot(bbox_wintri, aes(long,lat, group=group)) +
geom_polygon(fill="black") +
geom_polygon(data=countries_wintri,
aes(long,lat, group=group, fill=hole)) +
geom_path(data=countries_wintri,
aes(long,lat, group=group, fill=hole),
color="grey50", size=0.3) +
# geom_path(data=grat_wintri, aes(long, lat, group=group, fill=NULL), linetype=3, color="grey60") +
coord_equal(ratio=1) +
theme_opts +
scale_fill_manual(values=c("white", "white"), guide="none") # remove legend
p<- ggplot(bbox_wintri, aes(long,lat, group=group)) +
geom_polygon(fill="black") +
geom_polygon(data=countries_wintri,
aes(long,lat, group=group, fill=hole)) +
geom_path(data=countries_wintri,
aes(long,lat, group=group, fill=hole),
color="grey50", size=0.3) +
# geom_path(data=grat_wintri, aes(long, lat, group=group, fill=NULL), linetype=3, color="grey60") +
coord_equal(ratio=1) +
theme_opts +
scale_fill_manual(values=c("white", "white"), guide="none") # remove legend
plot (p)
.cache_theme_plot<- function (){
# create a blank ggplot theme
theme_opts <- list(theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill="white"),
panel.border = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=22)))
p<- ggplot(bbox_wintri, aes(long,lat, group=group)) +
geom_polygon(fill="black") +
geom_polygon(data=countries_wintri,
aes(long,lat, group=group, fill=hole)) +
geom_path(data=countries_wintri,
aes(long,lat, group=group, fill=hole),
color="grey50", size=0.3) +
# geom_path(data=grat_wintri, aes(long, lat, group=group, fill=NULL), linetype=3, color="grey60") +
coord_equal(ratio=1) +
theme_opts +
scale_fill_manual(values=c("white", "white"), guide="none") # remove legend
p
}
p<- .cache_theme_plot ()
p2<- p +  geom_point(data=counts,
aes(counts$lng, counts$lat,
group=NULL, fill=NULL,
size=counts$V1),
color=col, alpha=0.5) +
scale_size_continuous(limits=c(1,20), guide="none") # remove legend
plot (p2)
plot_pbdb<- function (query, name, col="turquoise1", dir){
if (exists ("bbox_wintri")==FALSE){
wmap_wintri<- .cache_wmap()
bbox_wintri<- .cache_bbox ()
countries_wintri<- .cache_countries ()
p<- .cache_theme_plot ()
}
#read data and project using winkel tripel projection
latlong <- project(cbind(query$lng, query$lat), proj="+proj=wintri")
latlong<- as.data.frame (latlong)
names (latlong)<- c("lng", "lat")
counts<- ddply(latlong,.(lng,lat),nrow)
#plot (the size of the points is the number of records in the site)
p2<- p +  geom_point(data=counts,
aes(counts$lng, counts$lat,
group=NULL, fill=NULL,
size=counts$V1),
color=col, alpha=0.5) +
labs(title=name) +
scale_size_continuous(limits=c(1,20), guide="none") # remove legend
plot (p2)
ggsave(plot=p, paste (dir,"/", name, ".png", sep=""), width=12.5, height=8.25, dpi=300)
}
plot_pbdb (canis_quaternary, "Canis Quaternary",
dir="C:/Users/sara/Documents/_CIENCIAS/pbdb_paper")
plot_pbdb (canis_quaternary, "Canis Quaternary",
dir="C:/Users/sara/Documents/_CIENCIAS/pbdb_paper")
counts$lat
kk (canis_quaternary)
.project_points<- function (query){
latlong <- project(cbind(query$lng, query$lat), proj="+proj=wintri")
names (latlong)<- c("lng", "lat")
counts<- ddply(latlong,.(lng,lat),nrow)
latlong<- as.data.frame (latlong)
counts
}
.project_points<- function (query){
latlong <- project(cbind(query$lng, query$lat), proj="+proj=wintri")
latlong<- as.data.frame (latlong)
names (latlong)<- c("lng", "lat")
counts<- ddply(latlong,.(lng,lat),nrow)
counts
}
plot_pbdb<- function (query, name, col="turquoise1", dir){
if (exists ("bbox_wintri")==FALSE){
wmap_wintri<- .cache_wmap()
bbox_wintri<- .cache_bbox ()
countries_wintri<- .cache_countries ()
p<- .cache_theme_plot ()
}
counts<- .project_points (query)
#plot (the size of the points is the number of records in the site)
p2<- p +  geom_point(data=counts,
aes(counts$lng, counts$lat,
group=NULL, fill=NULL,
size=counts$V1),
color=col, alpha=0.5) +
labs(title=name) +
scale_size_continuous(limits=c(1,20), guide="none") # remove legend
plot (p2)
ggsave(plot=p2, paste (dir,"/", name, ".png", sep=""), width=12.5, height=8.25, dpi=300)
}
plot_pbdb (canis_quaternary, "Canis Quaternary",
dir="C:/Users/sara/Documents/_CIENCIAS/pbdb_paper")
counts<- .project_points (query)
counts
plot_pbdb<- function (query, name, col="turquoise1", dir){
if (exists ("bbox_wintri")==FALSE){
wmap_wintri<- .cache_wmap()
bbox_wintri<- .cache_bbox ()
countries_wintri<- .cache_countries ()
p<- .cache_theme_plot ()
}
points_wt<- .project_points (query)
#plot (the size of the points is the number of records in the site)
p2<- p +  geom_point(data=points_wt,
aes(points_wt$lng, points_wt$lat,
group=NULL, fill=NULL,
size=points_wt$V1),
color=col, alpha=0.5) +
labs(title=name) +
scale_size_continuous(limits=c(1,20), guide="none") # remove legend
p2
}
plot_pbdb (canis_quaternary, "Canis Quaternary",
dir="C:/Users/sara/Documents/_CIENCIAS/pbdb_paper")
plot_pbdb<- function (query, name, col="turquoise1", dir){
points_wt<- .project_points (query)
#plot (the size of the points is the number of records in the site)
p2<- p +  geom_point(data=points_wt,
aes(points_wt$lng, points_wt$lat,
group=NULL, fill=NULL,
size=points_wt$V1),
color=col, alpha=0.5) +
labs(title=name) +
scale_size_continuous(limits=c(1,20), guide="none") # remove legend
p2
}
plot_pbdb (query= canis_0_2, name= "Canis (0-2 Ma)",
dir="C:/Users/sara/Documents/_CIENCIAS/pbdb_paper")
points_wt<- .project_points (query)
points_wt
plot_pbdb (query= canis_0_2, name= "Canis (0-2 Ma)",
dir="C:/Users/sara/Documents/_CIENCIAS/pbdb_paper")
plot_pbdb<- function (query, name, col="turquoise1", dir){
if (exists ("bbox_wintri")==FALSE){
wmap_wintri<- .cache_wmap()
bbox_wintri<- .cache_bbox ()
countries_wintri<- .cache_countries ()
p<- .cache_theme_plot ()
}
points_wt<- .project_points (query)
p2<- .add_points (points_wt, name, col="turquoise1")+
#plot (the size of the points is the number of records in the site)
ggsave(plot=p2, paste (dir,"/", name, ".png", sep=""), width=12.5, height=8.25, dpi=300)
plot (p2)
}
setwd ("C:/Users/sara/Documents/_CIENCIAS/pbdb")
library(rjson)
library(gtools)
library(RCurl)
library(rgdal)
library(ggplot2)
library (testthat)
library(plyr)
source.with.encoding('R/network.R', encoding='UTF-8')
source.with.encoding('R/rest_api_tools.R', encoding='UTF-8')
source.with.encoding('R/pbdb_cache.R', encoding='UTF-8')
source.with.encoding('R/pbdb_rest_api_setup.R', encoding='UTF-8')
source.with.encoding('R/pbdb_querys.R', encoding='UTF-8')
source.with.encoding('R/pbdb_querys.R', encoding='UTF-8')
source.with.encoding('R/pbdb_taxonomic_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_geographic_functions.R', encoding='UTF-8')
source.with.encoding('R/pbdb_temporal_functions.R', encoding='UTF-8')
canis<- pbdb_query_occurrences (limit="all",
vocab= "pbdb",
base_name="Canis",
show="coords")
plot_pbdb (canis, "Canis",
dir="C:/Users/sara/Documents/_CIENCIAS/pbdb_paper")
